package lab.cadl.cadts.topo.render.model.exploit;

import lab.cadl.cadts.topo.render.model.Node;
import lab.cadl.cadts.topo.render.model.Topology;
import lab.cadl.cadts.topo.render.model.decorators.BugDecorator;

import java.util.Stack;

public class ExploitGraphBuilder {
    private Stack<ExploitAction> actionStack = new Stack<>();
    private Topology topology;
    private int exploitIndex = 1;
    private BugDecorator prevBug;

    public ExploitGraphBuilder(Topology topology) {
        this.topology = topology;
        this.topology.setExploitGraph(new ExploitGraph());
    }

    public ExploitGraphBuilder nextAction(Vulnerability vulnerability, String nodeName) {
        Node node = topology.checkNode(nodeName);
        ExploitAction action = new ExploitAction(vulnerability, node);
        // 这句必须在addNextAction之前
        node.addDecorator(new BugDecorator(BugDecorator.State.INIT, 0, vulnerability));

        if (!actionStack.isEmpty()) {
            actionStack.peek().addNextAction(action);
        } else {
            topology.getExploitGraph().getRootNodes().add(action);
        }

        actionStack.push(action);
        return this;
    }

    public ExploitGraphBuilder prevAction() {
        actionStack.pop();
        return this;
    }

    public ExploitGraphBuilder beginExploit() {
        exploitIndex = 1;
        prevBug = null;
        return this;
    }

    public ExploitGraphBuilder exploit(String nodeName, String vulnerabilityName) {
        Node node = topology.checkNode(nodeName);
        BugDecorator bugDecorator = node.checkBug(vulnerabilityName);
        bugDecorator.exploit(exploitIndex);

        if (prevBug != null) {
            prevBug.setRealNext(bugDecorator);
        }

        exploitIndex += 1;
        prevBug = bugDecorator;
        return this;
    }

    public ExploitGraph build() {
        return topology.getExploitGraph();
    }
}
